from __future__ import annotations
from dataclasses import dataclass
from pathlib import Path
from ..config import Config
from .modules import AnalyzeTargetModule, PlanTestsModule, WriteTestsModule

@dataclass
class TestGenResult:
    written: list[Path]
    coverage_target: float
    def summary(self) -> str:
        return f"[TestGen] wrote {len(self.written)} file(s); target_coverage={self.coverage_target:.2f}"

def run_testgen(target: str, out_dir: str, target_coverage: float, max_revisions: int, config: Config) -> TestGenResult:
    out = Path(out_dir)
    out.mkdir(parents=True, exist_ok=True)
    analyze = AnalyzeTargetModule()
    plan = PlanTestsModule()
    write = WriteTestsModule()

    analysis = analyze(target=target).analysis
    plan_json = plan(analysis=analysis).plan_json
    tests_code = write(target=target, plan_json=plan_json).tests_code or ""

    # Write a single test file as a starting point
    test_path = out / "test_generated.py"
    header = "# Generated by dspy-dev (scaffold)\n"
    test_path.write_text(header + (tests_code or "def test_placeholder():\n    assert True\n"), encoding="utf-8")

    return TestGenResult(written=[test_path], coverage_target=target_coverage)
